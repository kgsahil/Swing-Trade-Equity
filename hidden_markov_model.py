# -*- coding: utf-8 -*-
"""Hidden Markov Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mL0jTLXawavvdP5_TviB0NnRwN1v1ejE
"""

#!pip install hmmlearn

from hmmlearn import hmm


import pandas as pd
import numpy as np
#import datetime as dt 
#import pandas_datareader as pdr
import matplotlib.pyplot as plt
np.random.seed(1)

all_data = pd.read_csv('./files/all_data_2008.csv')
all_data.Date = pd.to_datetime(all_data.Date)
all_data = all_data.set_index('Date')

#df  = pdr.get_data_yahoo('HDFCBANK.NS', start = dt.datetime(2008,1,1), end = dt.date.today())
def get_volatility(top_10_pred):
    Zs = []
    for index,row in top_10_pred.iterrows():
        
        df = all_data[all_data.symbol == row.Companies]
        df = df[:row.Date]
        
        returns = np.log(df['Close']).diff()
        
        returns.dropna(inplace=True)
        
        #returns.hist(bins=50);
        model = hmm.GaussianHMM(n_components=2, covariance_type="diag")
        X = returns.to_numpy().reshape(-1, 1)
        model.fit(X)
        # try to set the transition matrix intuitively
        model.transmat_ = np.array([
            [0.999, 0.001],
            [0.001, 0.999],                           
            ])
        # run inference again
        Z = model.predict(X)
        #plot_data_function(Z,returns,row.Companies)
        Zs.append(Z[len(Z)-1])
    top_10_pred['return_vol'] = Zs
    return top_10_pred

def plot_data_function(Z,returns,symbol):
    fig, ax = plt.subplots(figsize=(10, 5))
    plt.subplot(211)
    plt.plot(Z)
    plt.title(symbol)
    plt.subplot(212)
    #plt.plot(returns);
       
    # first create arrays with nan
    returns0 = np.empty(len(Z))
    returns1 = np.empty(len(Z))
    returns0[:] = np.nan
    returns1[:] = np.nan
    
    # fill in the values only if the state is the one corresponding to the array
    returns0[Z == 0] = returns[Z == 0]
    returns1[Z == 1] = returns[Z == 1]
    plt.plot(returns0, label='state 0')
    plt.plot(returns1, label='state 1')
    plt.legend()
  

